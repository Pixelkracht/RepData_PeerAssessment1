a <- available.packages()
head(rownames(a), 3)
head(rownames(i), 10)
head(rownames(a), 10)
install.packages("devtools")
library(devtools)
find_rtools()
install.packages("KernSmooth")
library KernSmooth
library(KernSmooth)
search()
y <- 10
f <- function(x) {}
f <- function(x) {
y <- 2
y^2 + g(x)
}
g <- function(x) {
x*y
}
f(3)
optim
?optim
?nlm
x <- function() {}
x <- function() {
}
x <- as.Date("1970-08-14")
unclass(x)
?unclass
x <- as.Date("1966-08-25")
unclass(x)
Sys.time()
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
if(x > 2) {
x <- 0
}
x
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
f(3)
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVector(numeric())
cachemean()
x <- makeVector(numeric())
y <- cachemean(x)
m <- matrix(nrow = 2, ncol = 2)
m <- matrix(1:4, nrow = 2, ncol = 2)
m
solve(m)
makeVector(numeric(1,3,10))
v <- makeVector(numeric(1,3,10))
v
cachemean(v)
v <- makeVector[get]
v <- makeVector$get
v$get
x <- numeric(1,3,10)
x <- numeric(3)
x
x <- numeric(3, 1:3)
x <- numeric(1:3)
v <- makeVector(x)
v
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
a <- makeVector(c(1,2,3,4))
a$get
a$get()
cachemean(a)
a$getmean()
cachemean(a)
m <- matrix(1:4, nrow = 2, ncol = 2)
a$getmean()
source('C:/Source/Data ninja/Coursera/Data Science Specialization/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix(m)
m$get
cm <- makeCacheMatrix(m)
cm$get
cm$get
cm$get
cm$get()
cm$getsolve()
cacheSolve(cm)
source('C:/Source/Data ninja/Coursera/Data Science Specialization/ProgrammingAssignment2/cachematrix.R')
cm$getsolve()
cm$getsolve()
cachesolve(cm)
?text
?par
?datasets
library(help="datasets")
rnorm(1000)
x <- rnorm(1000)
hist(x)
?rnorm
?pbeta
x <- 1:4
px/sum(x)
p <- x/sum(x)
temp <- rbind(x,p)
rownames(temp) <- c("X", "Prob")
temp
mean(x)
mn <- (1*1)+(2*2)+(3*3)+(4*4)
mn <- mn/10
setwd("~/R")
hosdata <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
View(hosdata)
names(hosdata)
?subset
x <- hosdata$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack
x <- subset(x)
x <- subset(x, !is.na(x))
x <- sapply(x, as.numeric)
x <- subset(x, !is.na(x))
y <- hosdata$Lower.Mortality.Estimate...Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack
y <- sapply(y, as.numeric)
y <- subset(y, !is.na(y))
xyplot(y ~ x)
library(lattice)
xyplot(y ~ x)
tr <- xyplot(y~x)
class(tr)
library(nlme)
xyplot(x ~ y | Diet, BodyWeight)
?xyplot?
?xyplot
?datasets
library(datasets)
use iris
?iris
x <- iris$Sepal.Length
x <- iris$Sepal.Length + iris$Sepal.Width
y <- iris$Petal.Length + iris$Petal.Width
xyplot(x ~ y | Species)
xyplot(x ~ y | Species, data=iris)
header(iris)
head(iris)
?points
?lines
?text
?axis
?llines
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
?print.trellis
?splom
>trellis.par.set
?trellis.par.set
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
library(ggplot)
install.packages("ggplot2")
library(ggplot)
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality)
qplot(Wind, Ozone, data = airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
data(movies)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + geom_smooth()
?lm
install.packages("xtable")
?xtable
?fig.height
?plot
?qplot
?split
data <- read.csv(unz("activity.zip", "activity.csv"), na.strings="NA")
setwd("~/R/RepData_PeerAssessment1/RepData_PeerAssessment1")
data <- read.csv(unz("activity.zip", "activity.csv"), na.strings="NA")
stepdata <- subset(data, !is.na(data$steps))
totals <- sapply(split(stepdata$steps, data$date, drop=TRUE), sum)
?qplot
names(totals)
qplot(totals, binwidth = x, geom="histogram")
library(ggplot2)
qplot(totals, binwidth = x, geom="histogram")
totals
mean(totals)
median(totals)
avgs <- sapply(split(stepdata$steps, stepdata$interval, drop=TRUE), mean)
times <- strptime(names(avgs), "%H:%M")
?strptime
zeropad <- function(s) {
while (length(s) < 4) {
s <- paste("0", s)
}
}
zeropad <- function(s) {
while (length(s) < 4) {
s <- paste("0", s)
}
return(s)
}
zeropad("0")
strptime("0", "%H:%M")
zeropad("0000")
strptime("0", "%H%M")
strptime("1", "%H%M")
strptime("100", "%H%M")
strptime("0100", "%H%M")
sapply(names(avgs), paste, "000")
for(n in names(avgs)) {
n <- paste("000", n, sep="")
}
names(avgs)
for(n in names(avgs)[1:121]){}
a <- sapply(names(avgs)[1:2], paste, "0", collapse)
a <- sapply(names(avgs), paste, "0", collapse)
names(avgs){1:2}
names(avgs)[1:2]
a <- sapply(names(avgs), function(x){return(paste("000", x, collapse))})
a <- sapply(names(avgs)[1:2], function(x){return(paste("000", x, collapse))})
a <- sapply(names(avgs)[1:2], function(x){return(paste0("000", x, collapse))})
a <- sapply(names(avgs)[1:2], function(x){return(paste0(c("000"), x, collapse))})
a <- sapply(names(avgs)[1:2], function(x){paste0(c("000"), x, collapse)})
a <- sapply(names(avgs)[1:2], function(x){return(paste0("111", x, collapse))})
paste0("000", names(avgs)[1], collapse))})
paste0("000", names(avgs)[1], collapse)
paste0("000", names(avgs), collapse)
a <- sapply(names(avgs, paste0, "000", collapse))
midnight <- strptime("00:00", "%H:%M")
p <- midnight + 3000
geom_smooth
?geom_smooth
?plot
times <- sapply(names(avg), as.numeric)
times <- sapply(names(avgs), as.numeric)
?replace
basedate <- strptime(0)
basedate <- strptime(0, "%H:%M")
somedate <- strptime('1605', "%H%M")
?ts
myts <- ts(start=c(0,0,1), end=c(23, 55, 288), frequency=1)
class(myts)
plot(ts, avgs)
plot(avgs, type="n", xlab="time intervals", ylab="avg steps", main="", xaxt="n")
lines(avgs, type="l")
axis(1, labels=names(avgs))
?axis
axis(1, at=[1:288] labels=names(avgs))
axis(1, at=1:288 labels=names(avgs))
axis(1, 1:288, labels=names(avgs))
axis(1, 1:288, labels=names(avgs), las=2)
plot(avgs, type="n", xlab="time intervals", ylab="avg steps", main="", xaxt="n")
lines(avgs, type="l")
axis(1, 1:288, labels=names(avgs), las=2)
axis(1, 1:288, labels=names(avgs), las=3)
plot(avgs, type="n", xlab="time intervals", ylab="avg steps", main="")
lines(avgs, type="l")
plot(avgs, type="n", xlab="time intervals", ylab="avg steps", main="", xaxt="n")
lines(avgs, type="l")
axis(1, 1:12, labels=("00:00", "02:00", "04:00", "06:00", "08:00", "10:00", "12:00", "14:00", "16:00", "18:00", "20:00", "22:00"), las=3)
axis(1, 1:12, labels=c("00:00", "02:00", "04:00", "06:00", "08:00", "10:00", "12:00", "14:00", "16:00", "18:00", "20:00", "22:00"), las=3)
axis(1, c(0, ), labels=c("00:00", "02:00", "04:00", "06:00", "08:00", "10:00", "12:00", "14:00", "16:00", "18:00", "20:00", "22:00"), las=3)
?seq
times <- seq(from=strptime("00:00", "%H:%M"), to=strptime("23:55", "%H:%M"), by="5 min")
times
?strptime
strftime(times[1], "%H:%M")
times <- sapply(times, strftime, "%H:%M")
plot(avgs, type="n", xlab="time intervals", ylab="avg steps", main="", xaxt="n")
lines(avgs, type="l")
axis(1, 1:288, labels=times, las=3)
plot(avgs, type="n", xlab="time intervals", ylab="avg steps", main="", xaxt="n")
lines(avgs, type="l")
axis(1, labels=times, las=3)
plot(avgs, times, type="n", xlab="time intervals", ylab="avg steps", main="")
?plot
plot(avgs, type="n", xlab="time intervals", ylab="avg steps", main="", xaxt="n")
lines(avgs, type="l")
axis(1, at=c(0, 100, 200), labels=times, las=3)
times <- seq(from=strptime("00:00", "%H:%M"), to=strptime("23:55", "%H:%M"), by="2 hour")
times <- seq(from=strptime("00:00", "%H:%M"), to=strptime("23:55", "%H:%M"), by="2 hours")
times <- sapply(times, strftime, "%H:%M")
axis(1, labels=times, las=3)
unname(avgs)
?plot
?qplot
?plot
?axis
?plot
?hist
lev <- levels(data$interval)
?read.csv
?unique
unique(data$date)
unique(data$interval)
?index
?replace
?match
?replace
?match
data <- read.csv(unz("activity.zip", "activity.csv"), na.strings="NA")
stepdata <- subset(data, !is.na(data$steps))
avgs <- sapply(split(stepdata$steps, stepdata$interval, drop=TRUE), mean)
iv <- unique(data$interval)
d <- data[1]
d <- data[[1]]
d <- data[[1,]]
d <- data[1,]
View(d)
replace(d, c(1), avgs[match(d["interval"], iv)])
foo <- replace(d, c(1), avgs[match(d["interval"], iv)])
View(foo)
avgs[match(15, iv)]
avgs[match(20, iv)]
avgs[match(25, iv)]
?replace
?match
?seq_along
avgs[0]
?weekdays
dotw <- strptime(data$date, "%Y-%m-%d")
d1 <- dotw[1]
d <- unlist(d1)
d
d$wday
d["wday"]
as.integer(d["wday"])
data <- read.csv(unz("activity.zip", "activity.csv"), na.strings="NA", stringsAsFactors=FALSE)
dotw <- strptime(data$date, "%Y-%m-%d")
v <- unlist(dotw[1])
v
v["wday"]
